package service

import (
	"strconv"
	"strings"
)

// Error is used to represent errors generated by services, which may contain
// more than one issue in order to provide the best feedback to the user.
type Error struct {
	// StatusCode is a numeric code which identifies the category of this error using
	// the HTTP status code standard (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status).
	StatusCode int
	// Issues is an array of strings which represents the descriptive, human-readable
	// errors that should be presented to the user.
	Issues []string
}

// Error returns the status code followed by a concatenation of all the issues in this
// Error.
func (e Error) Error() string {
	var codePrefix string
	if e.StatusCode != 0 {
		codePrefix = strconv.Itoa(e.StatusCode) + ": "
	}
	return codePrefix + strings.Join(e.Issues, " ")
}

// HasIssues returns true if there is more than one issue in this Error. If
// false, no issues were added, and this Error should not be treated as an error.
func (e Error) HasIssues() bool {
	return len(e.Issues) > 0
}

// addIssue adds an issue to this Error
func (e *Error) addIssue(iss string) {
	e.Issues = append(e.Issues, iss)
}
